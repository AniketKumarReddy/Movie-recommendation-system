# -*- coding: utf-8 -*-
"""Movie Recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L-Iyog5hX637crKpLQgddpTi8dfwoTpW

# **Movies Recmmendation System**

---

**A movie recommendation system is a tool or algorithm designed to suggest movies to users based on their preferences, behavior, and interactions. These systems analyze various data points, such as:**

**User Ratings and Reviews:** By examining what movies a user has liked or disliked, the system can recommend similar films.

**Viewing History:** It tracks what movies a user has watched in the past to suggest new titles in the same genre or by the same director.

**Collaborative Filtering:** It finds patterns by comparing users with similar tastes and recommends movies that people with similar preferences have enjoyed.

**Content-Based Filtering:** It looks at the attributes of movies (such as genre, cast, and director) and recommends films with similar characteristics to those the user has enjoyed.
"""

import pandas as pd

import numpy as np

df = pd.read_csv('https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Movies%20Recommendation.csv')

df.head()

df.info()

df.shape

df.columns

df_features = df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

"""Selected five features to recmmend movies. it may very from one project to anonther. Like one can add vote counts, budget, language ect."""

df_features.shape

df_features

x = df_features['Movie_Genre']+' '+df_features['Movie_Keywords']+' '+df_features['Movie_Tagline']+' '+df_features['Movie_Cast']+' '+df_features['Movie_Director']

x

x.shape

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

x = tfidf.fit_transform(x)

x.shape

print(x)

"""# **Get Similarity Score using Cosine Similarity**"""

from sklearn.metrics.pairwise import cosine_similarity

similarity_score = cosine_similarity(x)

similarity_score

similarity_score.shape

"""# Get Movie Name as Input form User and Validation for Closest Spelling"""

Favourite_Movie_Name = input('Enter your favourite movie name: ')

All_Movies_Title_List = df['Movie_Title'].tolist()

import difflib

Movie_Recommendation = difflib.get_close_matches(Favourite_Movie_Name, All_Movies_Title_List)
print(Movie_Recommendation)

Closer_Match = Movie_Recommendation[0]
print(Closer_Match)

Index_of_Close_Match_Movie = df[df.Movie_Title == Closer_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

# getting a list of similar movies
Recommendation_Score = list(enumerate(similarity_score[Index_of_Close_Match_Movie]))
print(Recommendation_Score)

len(Recommendation_Score)

"""# Get All Movies Sort Based on Recommdation Score wrt Favourite Movie"""

#sorting the movies based on their similarity scroe
Sorted_Similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)
print(Sorted_Similar_Movies)

from operator import index
# print the name of similar movies based on the index

print('Top 30 Movies Suggested for you: \n')

i = 1

for movie in Sorted_Similar_Movies:
    index = movie[0]
    title_from_index = df[df.index==index]['Movie_Title'].values[0]
    if (i<31):
        print(i, '.',title_from_index)
        i+=1

"""# Top 10 Movies Recommendartion System"""

from os import close
Movie_Name = input('Enter your favourite movie name: ')

list_of_all_titles = df['Movie_Title'].tolist()

Find_Close_Match = difflib.get_close_matches(Movie_Name, list_of_all_titles)

Close_Match = Find_Close_Match[0]

index_of_movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]

Recommendation_Score = list(enumerate(similarity_score[index_of_movie]))

sorted_similar_movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)

sorted_similar_movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)

print('Top 10 Movies Suggested for you: \n')

i = 1

for movie in sorted_similar_movies:
    index = movie[0]
    title_from_index = df[df.Movie_ID==index]['Movie_Title'].values
    if (i<11):
        print(i, '.',title_from_index)
        i+=1